
from flask import Flask, render_template, request, jsonify, session
import datetime
import re



import ibm_db
import pandas
import ibm_db_dbi
from sqlalchemy import create_engine

engine = create_engine('sqlite://',
                       echo = False)

dsn_hostname = "b1bc1829-6f45-4cd4-bef4-10cf081900bf.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud"
dsn_uid = "bgx86936"
dsn_pwd = "LDBdZPnYhnaBy1iv"

dsn_driver = "{IBM DB2 ODBC DRIVER}"
dsn_database = "bludb"
dsn_port = "32304"
dsn_protocol = "TCPIP"
dsn_security = "SSL"

dsn = (
    "DRIVER={0};"
    "DATABASE={1};"
    "HOSTNAME={2};"
    "PORT={3};"
    "PROTOCOL={4};"
    "UID={5};"
    "PWD={6};"
    "SECURITY={7};").format(dsn_driver, dsn_database, dsn_hostname, dsn_port, dsn_protocol, dsn_uid, dsn_pwd,dsn_security)



try:
    conn = ibm_db.connect(dsn, "", "")
    print ("Connected to database: ", dsn_database, "as user: ", dsn_uid, "on host: ", dsn_hostname)

except:
    print ("Unable to connect: ", ibm_db.conn_errormsg() )


app = Flask(__name__)
app.config.from_object(__name__)
app.config['SECRET_KEY'] = '7d441f27d441f27567d441f2b6176a'


@app.route("/")
def homepage():

    return render_template('UserLogin.html')

@app.route("/alogin")
def alogin():

    return render_template('AdminLogin.html')









@app.route("/AdminHome")
def AdminHome():

    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)

    selectQuery = "SELECT * from regtb "
    dataframe = pandas.read_sql(selectQuery, pd_conn)

    dataframe.to_sql('Employee_Data',
                     con=engine,
                     if_exists='append')

    # run a sql query
    data = engine.execute("SELECT * FROM Employee_Data").fetchall()

    return render_template('AdminHome.html', data=data)


@app.route("/NewProduct")
def NewProduct():

    return render_template('NewProduct.html')

@app.route("/ProductInfo")
def ProductInfo():
    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)

    selectQuery = "SELECT * from protb "
    dataframe = pandas.read_sql(selectQuery, pd_conn)

    dataframe.to_sql('Employee_Data',
                     con=engine,
                     if_exists='append')

    # run a sql query
    print(engine.execute("SELECT * FROM Employee_Data").fetchall())

    return render_template('ProductInfo.html', data=engine.execute("SELECT * FROM Employee_Data").fetchall())



@app.route("/SalesInfo")
def SalesInfo():

    return render_template('SalesInfo.html')





@app.route("/Search")
def Search():

    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)

    selectQuery = "SELECT * from protb "
    dataframe = pandas.read_sql(selectQuery, pd_conn)

    dataframe.to_sql('Employee_Data',
                     con=engine,
                     if_exists='append')

    # run a sql query
    print(engine.execute("SELECT * FROM Employee_Data").fetchall())

    return render_template('ViewProduct.html', data=engine.execute("SELECT * FROM Employee_Data").fetchall())



@app.route("/viewproduct", methods=['GET', 'POST'])
def viewproduct():

    searc = request.form['subcat']




    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)

    selectQuery =  "SELECT * from protb where SubCategory like '%" + searc + "%' "
    dataframe = pandas.read_sql(selectQuery, pd_conn)

    dataframe.to_sql('Employee_Data',
                     con=engine,
                     if_exists='append')

    # run a sql query
    print(engine.execute("SELECT * FROM Employee_Data").fetchall())

    return render_template('ViewProduct.html', data=engine.execute("SELECT * FROM Employee_Data").fetchall())

@app.route("/NewUser")
def NewUser():

    return render_template('NewUser.html')
@app.route("/Newjob")
def Newjob():

    return render_template('index.html')


@app.route("/RNewUser", methods=['GET', 'POST'])
def RNewUser():
    if request.method == 'POST':

        name1 = request.form['name']
        gender1 = request.form['gender']
        Age = request.form['age']
        email = request.form['email']
        address = request.form['address']
        pnumber = request.form['phone']
        uname = request.form['uname']
        password = request.form['psw']

        conn = ibm_db.connect(dsn, "", "")

        insertQuery = "INSERT INTO regtb VALUES ('" + name1 + "','" + gender1 + "','" + Age + "','" + email + "','" + pnumber + "','" + address + "','" + uname + "','" + password + "')"
        insert_table = ibm_db.exec_immediate (conn, insertQuery)
        print(insert_table)






    return render_template('userlogin.html')

@app.route("/RNewProduct", methods=['GET', 'POST'])
def RNewProduct():
    if request.method == 'POST':


        file = request.files['fileupload']
        file.save("static/upload/" + file.filename)


        ProductId =request.form['pid']
        Gender =request.form['gender']
        Category =request.form['cat']
        SubCategory=request.form['subcat']
        ProductType=request.form['ptype']
        Colour=request.form['color']
        Usage=request.form['usage']
        ProductTitle=request.form['ptitle']
        price = request.form['price']
        Image= file.filename
        ImageURL="static/upload/" + file.filename



        conn = ibm_db.connect(dsn, "", "")

        insertQuery = "INSERT INTO protb VALUES ('"+ ProductId +"','" + Gender + "','" + Category + "','" + SubCategory + "','" + ProductType + "','" + Colour + "','"+Usage +"','"+ProductTitle+"','"+ Image +"','"+ ImageURL +"','"+ price +"')"
        insert_table = ibm_db.exec_immediate(conn, insertQuery)

        data1 = 'Record Saved!'
        return render_template('goback.html', data=data1)







@app.route("/userlogin", methods=['GET', 'POST'])
def userlogin():
    error = None
    if request.method == 'POST':
        username = request.form['uname']
        password = request.form['password']
        session['uname'] = request.form['uname']


        conn = ibm_db.connect(dsn, "", "")
        pd_conn = ibm_db_dbi.Connection(conn)

        selectQuery = "SELECT * from regtb where uname='" + username + "' and password='" + password + "'"
        dataframe = pandas.read_sql(selectQuery, pd_conn)

        if dataframe.empty:
            data1 = 'Username or Password is wrong'
            return render_template('goback.html', data=data1)
        else:
            print("Login")
            selectQuery = "SELECT * from regtb where uname='" + username + "' and password='" + password + "'"
            dataframe = pandas.read_sql(selectQuery, pd_conn)



            dataframe.to_sql('Employee_Data',
                       con=engine,
                       if_exists='append')

            # run a sql query
            print(engine.execute("SELECT * FROM Employee_Data").fetchall())

            return render_template('index.html', data=engine.execute("SELECT * FROM Employee_Data").fetchall())




@app.route("/adminlogin", methods=['GET', 'POST'])
def adminlogin():
    error = None
    if request.method == 'POST':
        username = request.form['uname']
        password = request.form['password']


        conn = ibm_db.connect(dsn, "", "")
        pd_conn = ibm_db_dbi.Connection(conn)

        selectQuery = "SELECT * from admintb where USERNAME='" + username + "' and PASSWORD='" + password + "'"
        dataframe = pandas.read_sql(selectQuery, pd_conn)

        if dataframe.empty:
            data1 = 'Username or Password is wrong'
            return render_template('goback.html', data=data1)
        else:
            print("Login")
            selectQuery = "SELECT * from regtb "
            dataframe = pandas.read_sql(selectQuery, pd_conn)

            dataframe.to_sql('Employee_Data', con=engine,if_exists='append')

            # run a sql query
            print(engine.execute("SELECT * FROM Employee_Data").fetchall())

        return render_template('AdminHome.html', data=engine.execute("SELECT * FROM Employee_Data").fetchall())





@app.route("/Remove", methods=['GET'])
def Remove():


    pid = request.args.get('id')
    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)

    insertQuery = "Delete from protb  where id='"+ pid +"'"
    insert_table = ibm_db.exec_immediate(conn, insertQuery)


    selectQuery = "SELECT * from protb "
    dataframe = pandas.read_sql(selectQuery, pd_conn)

    dataframe.to_sql('Employee_Data',
                     con=engine,
                     if_exists='append')

    # run a sql query
    print(engine.execute("SELECT * FROM Employee_Data").fetchall())

    return render_template('ProductInfo.html', data=engine.execute("SELECT * FROM Employee_Data").fetchall())



@app.route("/fullInfo")
def fullInfo():
    pid = request.args.get('pid')
    session['pid'] = pid


    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)

    selectQuery = "SELECT * FROM protb where ProductId='" + pid + "' "
    dataframe = pandas.read_sql(selectQuery, pd_conn)

    dataframe.to_sql('Employee_Data',
                     con=engine,
                     if_exists='append')

    # run a sql query
    print(engine.execute("SELECT * FROM Employee_Data").fetchall())



    return render_template('ProductFullInfo.html', data=engine.execute("SELECT * FROM Employee_Data").fetchall())



@app.route("/Book", methods=['GET', 'POST'])
def Book():
    if request.method == 'POST':


        uname = session['uname']
        pid = session['pid']

        qty = request.form['qty']

        ctype = request.form['ctype']
        cardno = request.form['cardno']
        cvno = request.form['cvno']


        Bookingid = ''
        ProductName =''
        UserName= uname
        Mobile=''
        Email=''
        Qty = qty
        Amount=''


        CardType = ctype
        CardNo = cardno
        CvNo = cvno
        date = datetime.datetime.now().strftime('%d-%b-%Y')


        conn = ibm_db.connect(dsn, "", "")
        pd_conn = ibm_db_dbi.Connection(conn)
        selectQuery = "SELECT * FROM protb where ProductId='" + pid + "' "
        dataframe = pandas.read_sql(selectQuery, pd_conn)

        dataframe.to_sql('Employee_Data',con=engine,if_exists='append')
        data = engine.execute("SELECT * FROM Employee_Data").fetchall()
        for item in data:
            ProductName = item[8]
            price = item[11]
            print(price)
            Amount = float(price) * float(Qty)

            print(Amount)

        selectQuery1 ="SELECT  *  FROM  regtb where  uame='" + uname + "'"
        dataframe = pandas.read_sql(selectQuery1, pd_conn)

        dataframe.to_sql('regtb', con=engine, if_exists='append')
        data1 = engine.execute("SELECT * FROM regtb").fetchall()

        for item1 in data1:
            Mobile = item1[5]
            Email = item1[4]




        selectQuery = "SELECT  *  FROM  booktb"
        dataframe = pandas.read_sql(selectQuery, pd_conn)

        dataframe.to_sql('booktb', con=engine, if_exists='append')
        data2 = engine.execute("SELECT * FROM booktb").fetchall()
        count = 0

        for item in data2:
            count+=1




        Bookingid="BOOKID00" + str(count)


        insertQuery = "INSERT INTO booktb VALUES ('" + Bookingid + "','"+ ProductName +"','" + price + "','" + uname + "','" + Mobile + "','" + Email + "','" + str(Qty) + "','" + str(Amount) + "','"+ str(CardType) +"','"+ str(CardNo) +"','"+ str(CvNo) +"','"+ str(date) +"')"
        insert_table = ibm_db.exec_immediate(conn, insertQuery)

        sendmsg(Email,"order received delivery in one week ")







        selectQuery = "SELECT * FROM booktb where  uname= '" + uname + "' "
        dataframe = pandas.read_sql(selectQuery, pd_conn)

        dataframe.to_sql('booktb1', con=engine, if_exists='append')
        data = engine.execute("SELECT * FROM booktb1").fetchall()

        return render_template('UOrderInfo.html', data=data)



def sendmsg(Mailid,message):
    import smtplib
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    from email.mime.base import MIMEBase
    from email import encoders

    fromaddr = "sampletest685@gmail.com"
    toaddr = Mailid

    # instance of MIMEMultipart
    msg = MIMEMultipart()

    # storing the senders email address
    msg['From'] = fromaddr

    # storing the receivers email address
    msg['To'] = toaddr

    # storing the subject
    msg['Subject'] = "Alert"

    # string to store the body of the mail
    body = message

    # attach the body with the msg instance
    msg.attach(MIMEText(body, 'plain'))

    # creates SMTP session
    s = smtplib.SMTP('smtp.gmail.com', 587)

    # start TLS for security
    s.starttls()

    # Authentication
    s.login(fromaddr, "hneucvnontsuwgpj")

    # Converts the Multipart msg into a string
    text = msg.as_string()

    # sending the mail
    s.sendmail(fromaddr, toaddr, text)

    # terminating the session
    s.quit()


@app.route("/UOrderInfo")
def UOrderInfo():

    uname = session['uname']

    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)
    selectQuery = "SELECT * FROM booktb where uname= '" + uname + "' "
    dataframe = pandas.read_sql(selectQuery, pd_conn)
    dataframe.to_sql('booktb1', con=engine, if_exists='append')
    data = engine.execute("SELECT * FROM booktb1").fetchall()


    return render_template('UOrderInfo.html', data=data)


@app.route("/UserHome")
def UserHome():

    uname = session['uname']


    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)
    selectQuery = "SELECT * FROM regtb where  uname= '" + uname + "' "
    dataframe = pandas.read_sql(selectQuery, pd_conn)
    dataframe.to_sql('booktb1', con=engine, if_exists='append')
    data = engine.execute("SELECT * FROM booktb1").fetchall()


    return render_template('UserHome.html', data=data)


@app.route("/ASalesInfo")
def ASalesInfo():
    conn = ibm_db.connect(dsn, "", "")
    pd_conn = ibm_db_dbi.Connection(conn)
    selectQuery = "SELECT * FROM booktb  "
    dataframe = pandas.read_sql(selectQuery, pd_conn)
    dataframe.to_sql('booktb', con=engine, if_exists='append')
    data = engine.execute("SELECT * FROM booktb").fetchall()

    return render_template('ASalesInfo.html', data=data)

def main():
    app.run(debug=True, use_reloader=True)
@app.route("/UReviewInfo")
def ureview():
    return render_template('NewReview.html')

if __name__ == '__main__':
    main()

html
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Design by foolishdeveloper.com -->
    <title>job and skill</title>

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">
    <!--Stylesheet-->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/login.css') }}"  />

</head>
<body>
    <div class="background">
        <div class="shape"></div>
        <div class="shape"></div>
    </div>
    <form id="form1" runat="server" method="post"  action="/userlogin">
        <h3>Login Here</h3>

        <label for="username">Username</label>
        <input type="text" placeholder="user name" name="uname" id="username">

        <label for="password">Password</label>
        <input type="password" placeholder="Password" name="password" id="password">

        <button>Log In</button>
        <div class="social">
          <div class="go"><a href="/NewUser"> Register</a></div>
          <div class="fb"><a href="/alogin" > Admin </a></div>
        </div>
    </form>
</body>
</html>




<html xmlns="http://www.w3.org/1999/xhtml">
<head>
   <title>job search</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta charset="utf-8">
<meta name="keywords" content="Cat Club Responsive web template, Bootstrap Web Templates, Flat Web Templates, Android Compatible web template,
Smartphone Compatible web template, free webdesigns for Nokia, Samsung, LG, SonyEricsson, Motorola web design" />
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false); function hideURLbar(){ window.scrollTo(0,1); } </script>

<link href='//fonts.googleapis.com/css?family=Pacifico' rel='stylesheet' type='static/css'>
<link href="//fonts.googleapis.com/css?family=Raleway:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
<link href='//fonts.googleapis.com/css?family=Roboto+Condensed:400,700italic,700,400italic,300italic,300' rel='stylesheet' type='static/static/text/css'>
<script src="static/js/jquery-1.11.1.min.js"></script>
<script src="static/js/bootstrap.js"></script>
<script type="text/javascript">
    jQuery(document).ready(function ($) {
        $(".scroll").click(function (event) {
            event.preventDefault();
            $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
        });
    });
</script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <style>
        a{
            text-decoration: none;
            color: black;
        }
        nav{
            background: grey;
            height: 80px;
            width: 100%;
        }
      nav ul{
            float: right;
          margin-right: 20px;
        }
        nav ul li{
            display: inline-block;
            line-height: 60px;
            margin: 0 5px;
        
        }
        nav ul li a{
            color: white;
            font-size: 17px;
            padding: 7px 13px;
            border-radius: 3px;
            text-transform: uppercase;
        }
        a.active,a:hover{
            background: #1b9bff;
            transition: .5s;
        }
        .checkbtn{
            font-size: 30px;
            color: white;
            float: right;
            line-height: 80px;
            margin-right: 40px;
            cursor: pointer;
            display: none;
        }
        #check{
            display: none
        }
        @media (max-width: 952px){
            nav ul li a{
                font-size: 16px;
            }
        }
        @media (max-width: 858px){
            .checkbtn{
                display: block;
            }
            ul{
                position: fixed;
                width: 100%;
                height: 100vh;
                background: #2c3e50;
                top: 80px;
                left: -100%;
                text-align: center;
                transition: all .5s;
            }
            nav ul li{
                display: block;
                margin: 50px 0;
                line-height: 30px
            
            }
            nav ul li a{
                font-size: 20px;
            
            }
            a:hover,a.active{
                background: none;
                color: #0082e6;
            }
            #checkchecked ~ ul{
                left: 0;
            }
        }
        
    </style>
    </head>
<body style="background-color: #080710; color: white;">
<h1 align= 'center'>
							<a style="color: white; " href="/">JOB SEARCH</a>
						</h1>   
    <nav>  <input type="checkbox" id="check" >
        <label for="check" class="checkbtn">
        <i class="fas fa-bars"></i></label>
        <ul>  

									<li><a href="/">Home</a></li>
									<li><a href="/adminlogin">Admin Login</a></li>
									<li><a href="/UserLogin">User Login</a></li>
									<li><a href="/RNewUser">New User</a></li>

                                    	
								</ul> </nav> 
         <form id="form" name="form" method="post" action="/RNewUser">
	   <div align="center" ><h2>  <strong>New User Registration</strong>  </h2> </div>
              <table width="35%" border="0" align="center">

    <tr>
          <td></td>
    </tr>
    <tr>
      <td width="45%" height="48">Name</td>
      <td width="55%"><input name="name" type="text" id="name"  required pattern="[A-Za-z ]{3,32}"/>
      </td>
    </tr>
    <tr>
      <td height="50">Gender</td>
      <td><input name="gender" type="radio" value="male" required />
        Male
          <input name="gender" type="radio" value="female" />
          Female</td>

    </tr>
    <tr>
      <td height="49">Age</td>
      <td>
        <input name="age" type="text" id="age" required size="3" />
      </td>
    </tr>
    <tr>
      <td height="48">Email Id</td>
      <td><input name="email" type="email" id="email" required /></td>
    </tr>
	  <tr>
      <td height="46">Phone Number </td>
      <td><input name="phone" type="text" id="phone"   required size="10" pattern="[0-9]{10}"/></td>
    </tr>


	   <tr>
      <td height="50">Address</td>
      <td><textarea name="address" id="address" required></textarea></td>
       </tr>

    <tr>
      <td height="40">User Name</td>
      <td><input name="uname" type="text" id="uname"  required/></td>
    </tr>


    <tr>
     <td height="53">Passwrod</td>
      <td><input name="psw" type="password" id="psw"  required/></td>
    </tr>

	<tr>
      <td height="72">&nbsp;</td>
      <td><input name="btn" type="submit" id="btn" value="Submit" />
      <input type="reset" name="Submit2" value="Reset" /></td>
    </tr>
  </table>
            </form>
      <!-- copyright -->
	<div class="copyright">
		<div class="container">
			<p>©  All rights reserved | Design by <a href="#">JOB AND SKILL</a></p>
		</div>
	</div>
	<!-- //copyright -->
	<script src="static/js/responsiveslides.min.js"></script>
	<script src="static/js/SmoothScroll.min.js"></script>
<script type="text/javascript" src="static/js/move-top.js"></script>
<script type="text/javascript" src="static/js/easing.js"></script>
	<!-- here stars scrolling icon -->
	<script type="text/javascript">
	    $(document).ready(function () {
	        /*
	        var defaults = {
	        containerID: 'toTop', // fading element id
	        containerHoverID: 'toTopHover', // fading element hover id
	        scrollSpeed: 1200,
	        easingType: 'linear' 
	        };
	        */

	        $().UItoTop({ easingType: 'easeOutQuart' });

	    });
	</script>
<!-- //here ends scrolling icon -->
</body>
</html>


<html xmlns="http://www.w3.org/1999/xhtml">
<head>
   <title>job search</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta charset="utf-8">
<meta name="keywords" content="Cat Club Responsive web template, Bootstrap Web Templates, Flat Web Templates, Android Compatible web template,
Smartphone Compatible web template, free webdesigns for Nokia, Samsung, LG, SonyEricsson, Motorola web design" />
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false); function hideURLbar(){ window.scrollTo(0,1); } </script>

<link href='//fonts.googleapis.com/css?family=Pacifico' rel='stylesheet' type='static/css'>
<link href="//fonts.googleapis.com/css?family=Raleway:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
<link href='//fonts.googleapis.com/css?family=Roboto+Condensed:400,700italic,700,400italic,300italic,300' rel='stylesheet' type='static/static/text/css'>
<script src="static/js/jquery-1.11.1.min.js"></script>
<script src="static/js/bootstrap.js"></script>
<script type="text/javascript">
    jQuery(document).ready(function ($) {
        $(".scroll").click(function (event) {
            event.preventDefault();
            $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
        });
    });
</script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <style>
        a{
            text-decoration: none;
            color: black;
        }
        nav{
            background: grey;
            height: 80px;
            width: 100%;
        }
      nav ul{
            float: right;
          margin-right: 20px;
        }
        nav ul li{
            display: inline-block;
            line-height: 60px;
            margin: 0 5px;
        
        }
        nav ul li a{
            color: white;
            font-size: 17px;
            padding: 7px 13px;
            border-radius: 3px;
            text-transform: uppercase;
        }
        a.active,a:hover{
            background: #1b9bff;
            transition: .5s;
        }
        .checkbtn{
            font-size: 30px;
            color: white;
            float: right;
            line-height: 80px;
            margin-right: 40px;
            cursor: pointer;
            display: none;
        }
        #check{
            display: none
        }
        @media (max-width: 952px){
            nav ul li a{
                font-size: 16px;
            }
        }
        @media (max-width: 858px){
            .checkbtn{
                display: block;
            }
            ul{
                position: fixed;
                width: 100%;
                height: 100vh;
                background: #2c3e50;
                top: 80px;
                left: -100%;
                text-align: center;
                transition: all .5s;
            }
            nav ul li{
                display: block;
                margin: 50px 0;
                line-height: 30px
            
            }
            nav ul li a{
                font-size: 20px;
            
            }
            a:hover,a.active{
                background: none;
                color: #0082e6;
            }
            #checkchecked ~ ul{
                left: 0;
            }
        }
        
    </style>
    </head>
<body style="background-color: #080710; color: white;">
<h1 align= 'center'>
							<a style="color: white; " href="/">JOB SEARCH</a>
						</h1>   
    <nav>  <input type="checkbox" id="check" >
        <label for="check" class="checkbtn">
        <i class="fas fa-bars"></i></label>
        <ul>  

									<li><a href="/">Home</a></li>
									<li><a href="/adminlogin">Admin Login</a></li>
									<li><a href="/UserLogin">User Login</a></li>
									<li><a href="/RNewUser">New User</a></li>

                                    	
								</ul> </nav> 
         <form id="form" name="form" method="post" action="/RNewUser">
	   <div align="center" ><h2>  <strong>New User Registration</strong>  </h2> </div>
              <table width="35%" border="0" align="center">

    <tr>
          <td></td>
    </tr>
    <tr>
      <td width="45%" height="48">Name</td>
      <td width="55%"><input name="name" type="text" id="name"  required pattern="[A-Za-z ]{3,32}"/>
      </td>
    </tr>
    <tr>
      <td height="50">Gender</td>
      <td><input name="gender" type="radio" value="male" required />
        Male
          <input name="gender" type="radio" value="female" />
          Female</td>

    </tr>
    <tr>
      <td height="49">Age</td>
      <td>
        <input name="age" type="text" id="age" required size="3" />
      </td>
    </tr>
    <tr>
      <td height="48">Email Id</td>
      <td><input name="email" type="email" id="email" required /></td>
    </tr>
	  <tr>
      <td height="46">Phone Number </td>
      <td><input name="phone" type="text" id="phone"   required size="10" pattern="[0-9]{10}"/></td>
    </tr>


	   <tr>
      <td height="50">Address</td>
      <td><textarea name="address" id="address" required></textarea></td>
       </tr>

    <tr>
      <td height="40">User Name</td>
      <td><input name="uname" type="text" id="uname"  required/></td>
    </tr>


    <tr>
     <td height="53">Passwrod</td>
      <td><input name="psw" type="password" id="psw"  required/></td>
    </tr>

	<tr>
      <td height="72">&nbsp;</td>
      <td><input name="btn" type="submit" id="btn" value="Submit" />
      <input type="reset" name="Submit2" value="Reset" /></td>
    </tr>
  </table>
            </form>
      <!-- copyright -->
	<div class="copyright">
		<div class="container">
			<p>©  All rights reserved | Design by <a href="#">JOB AND SKILL</a></p>
		</div>
	</div>
	<!-- //copyright -->
	<script src="static/js/responsiveslides.min.js"></script>
	<script src="static/js/SmoothScroll.min.js"></script>
<script type="text/javascript" src="static/js/move-top.js"></script>
<script type="text/javascript" src="static/js/easing.js"></script>
	<!-- here stars scrolling icon -->
	<script type="text/javascript">
	    $(document).ready(function () {
	        /*
	        var defaults = {
	        containerID: 'toTop', // fading element id
	        containerHoverID: 'toTopHover', // fading element hover id
	        scrollSpeed: 1200,
	        easingType: 'linear' 
	        };
	        */

	        $().UItoTop({ easingType: 'easeOutQuart' });

	    });
	</script>
<!-- //here ends scrolling icon -->
</body>
</html>